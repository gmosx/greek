package greekutil

import "regexp"

// TODO: optimize rules!

var greekToGreeklishRules = []rule{
	{regexp.MustCompile("ΓΧ"), "GX"},
	{regexp.MustCompile("γχ"), "gx"},
	{regexp.MustCompile("ΤΘ"), "T8"},
	{regexp.MustCompile("τθ"), "t8"},
	{regexp.MustCompile("(θη|Θη),"), "8h"},
	{regexp.MustCompile("ΘΗ"), "8H"},
	{regexp.MustCompile("αυ"), "au"},
	{regexp.MustCompile("Αυ"), "Au"},
	{regexp.MustCompile("ΑΥ"), "AY"},
	{regexp.MustCompile("ευ"), "eu"},
	{regexp.MustCompile("εύ"), "eu"},
	{regexp.MustCompile("εϋ"), "ey"},
	{regexp.MustCompile("εΰ"), "ey"},
	{regexp.MustCompile("Ευ"), "Eu"},
	{regexp.MustCompile("Εύ"), "Eu"},
	{regexp.MustCompile("Εϋ"), "Ey"},
	{regexp.MustCompile("Εΰ"), "Ey"},
	{regexp.MustCompile("ΕΥ"), "EY"},
	{regexp.MustCompile("ου"), "ou"},
	{regexp.MustCompile("ού"), "ou"},
	{regexp.MustCompile("οϋ"), "oy"},
	{regexp.MustCompile("οΰ"), "oy"},
	{regexp.MustCompile("Ου"), "Ou"},
	{regexp.MustCompile("Ού"), "Ou"},
	{regexp.MustCompile("Οϋ"), "Oy"},
	{regexp.MustCompile("Οΰ"), "Oy"},
	{regexp.MustCompile("ΟΥ"), "OY"},
	{regexp.MustCompile("Α"), "A"},
	{regexp.MustCompile("α"), "a"},
	{regexp.MustCompile("ά"), "a"},
	{regexp.MustCompile("Ά"), "A"},
	{regexp.MustCompile("Β"), "B"},
	{regexp.MustCompile("β"), "b"},
	{regexp.MustCompile("Γ"), "G"},
	{regexp.MustCompile("γ"), "g"},
	{regexp.MustCompile("Δ"), "D"},
	{regexp.MustCompile("δ"), "d"},
	{regexp.MustCompile("Ε"), "E"},
	{regexp.MustCompile("ε"), "e"},
	{regexp.MustCompile("έ"), "e"},
	{regexp.MustCompile("Έ"), "E"},
	{regexp.MustCompile("Ζ"), "Z"},
	{regexp.MustCompile("ζ"), "z"},
	{regexp.MustCompile("Η"), "H"},
	{regexp.MustCompile("η"), "h"},
	{regexp.MustCompile("ή"), "h"},
	{regexp.MustCompile("Ή"), "H"},
	{regexp.MustCompile("Θ"), "TH"},
	{regexp.MustCompile("θ"), "th"},
	{regexp.MustCompile("Ι"), "I"},
	{regexp.MustCompile("Ϊ"), "I"},
	{regexp.MustCompile("ι"), "i"},
	{regexp.MustCompile("ί"), "i"},
	{regexp.MustCompile("ΐ"), "i"},
	{regexp.MustCompile("ϊ"), "i"},
	{regexp.MustCompile("Ί"), "I"},
	{regexp.MustCompile("Κ"), "K"},
	{regexp.MustCompile("κ"), "k"},
	{regexp.MustCompile("Λ"), "L"},
	{regexp.MustCompile("λ"), "l"},
	{regexp.MustCompile("Μ"), "M"},
	{regexp.MustCompile("μ"), "m"},
	{regexp.MustCompile("Ν"), "N"},
	{regexp.MustCompile("ν"), "n"},
	{regexp.MustCompile("Ξ"), "KS"},
	{regexp.MustCompile("ξ"), "ks"},
	{regexp.MustCompile("Ο"), "O"},
	{regexp.MustCompile("ο"), "o"},
	{regexp.MustCompile("Ό"), "O"},
	{regexp.MustCompile("ό"), "o"},
	{regexp.MustCompile("Π"), "P"},
	{regexp.MustCompile("π"), "p"},
	{regexp.MustCompile("Ρ"), "R"},
	{regexp.MustCompile("ρ"), "r"},
	{regexp.MustCompile("Σ"), "S"},
	{regexp.MustCompile("σ"), "s"},
	{regexp.MustCompile("Τ"), "T"},
	{regexp.MustCompile("τ"), "t"},
	{regexp.MustCompile("Υ"), "Y"},
	{regexp.MustCompile("Ύ"), "Y"},
	{regexp.MustCompile("Ϋ"), "Y"},
	{regexp.MustCompile("ΰ"), "y"},
	{regexp.MustCompile("ύ"), "y"},
	{regexp.MustCompile("ϋ"), "y"},
	{regexp.MustCompile("υ"), "y"},
	{regexp.MustCompile("Φ"), "F"},
	{regexp.MustCompile("φ"), "f"},
	{regexp.MustCompile("Χ"), "X"},
	{regexp.MustCompile("χ"), "x"},
	{regexp.MustCompile("Ψ"), "Ps"},
	{regexp.MustCompile("ψ"), "ps"},
	{regexp.MustCompile("Ω"), "w"},
	{regexp.MustCompile("ω"), "w"},
	{regexp.MustCompile("Ώ"), "w"},
	{regexp.MustCompile("ώ"), "w"},
	{regexp.MustCompile("ς"), "s"},
	{regexp.MustCompile(";"), "?"},
}

// Greeklish returns s transliterated into greeklish.
func Greeklish(s string) string {
	return applyRules(s, greekToGreeklishRules)
}
